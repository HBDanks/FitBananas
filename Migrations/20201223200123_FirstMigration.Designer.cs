// <auto-generated />
using System;
using FitBananas.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitBananas.Migrations
{
    [DbContext(typeof(BananaContext))]
    [Migration("20201223200123_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FitBananas.Models.Athlete", b =>
                {
                    b.Property<int>("AthleteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("MetricUnits")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AthleteId");

                    b.HasIndex("TokenId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("FitBananas.Models.AthleteChallenge", b =>
                {
                    b.Property<int>("AthleteChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AthleteChallengeId");

                    b.HasIndex("AthleteId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("AthleteChallenges");
                });

            modelBuilder.Entity("FitBananas.Models.AthleteStats", b =>
                {
                    b.Property<int>("AthleteStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AthleteStatsId");

                    b.HasIndex("AthleteId")
                        .IsUnique();

                    b.ToTable("AthleteStatsSets");
                });

            modelBuilder.Entity("FitBananas.Models.BikeTotal", b =>
                {
                    b.Property<int>("BikeTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteStatsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Elevation_Gain")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BikeTotalId");

                    b.HasIndex("AthleteStatsId")
                        .IsUnique();

                    b.ToTable("BikeTotals");
                });

            modelBuilder.Entity("FitBananas.Models.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ChallengeType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Goal")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ChallengeId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("FitBananas.Models.RunTotal", b =>
                {
                    b.Property<int>("RunTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteStatsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("Elevation_Gain")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("RunTotalId");

                    b.HasIndex("AthleteStatsId")
                        .IsUnique();

                    b.ToTable("RunTotals");
                });

            modelBuilder.Entity("FitBananas.Models.SwimTotal", b =>
                {
                    b.Property<int>("SwimTotalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AthleteStatsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SwimTotalId");

                    b.HasIndex("AthleteStatsId")
                        .IsUnique();

                    b.ToTable("SwimTotals");
                });

            modelBuilder.Entity("FitBananas.Models.Token", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("ExpiresIn")
                        .HasColumnType("time(6)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("FitBananas.Models.Athlete", b =>
                {
                    b.HasOne("FitBananas.Models.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitBananas.Models.AthleteChallenge", b =>
                {
                    b.HasOne("FitBananas.Models.Athlete", "ThisAthlete")
                        .WithMany("Challenges")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitBananas.Models.Challenge", "ThisChallenge")
                        .WithMany("Athletes")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitBananas.Models.AthleteStats", b =>
                {
                    b.HasOne("FitBananas.Models.Athlete", "User")
                        .WithOne("AthletesStats")
                        .HasForeignKey("FitBananas.Models.AthleteStats", "AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitBananas.Models.BikeTotal", b =>
                {
                    b.HasOne("FitBananas.Models.AthleteStats", "UserStats")
                        .WithOne("YTD_Ride_Totals")
                        .HasForeignKey("FitBananas.Models.BikeTotal", "AthleteStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitBananas.Models.RunTotal", b =>
                {
                    b.HasOne("FitBananas.Models.AthleteStats", "UserStats")
                        .WithOne("YTD_Run_Totals")
                        .HasForeignKey("FitBananas.Models.RunTotal", "AthleteStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitBananas.Models.SwimTotal", b =>
                {
                    b.HasOne("FitBananas.Models.AthleteStats", "UserStats")
                        .WithOne("YTD_Swim_Totals")
                        .HasForeignKey("FitBananas.Models.SwimTotal", "AthleteStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
